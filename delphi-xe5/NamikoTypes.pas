unit NamikoTypes;

interface

uses
  Winapi.Windows, System.UITypes, System.Generics.Collections;

type
  TLogType = (logDebug, logInfo, logWarning, logError, logException);

type
  TNetResult = (OK, BadFormat, BadKey, BadTime, BadData, BadLen, Hexied, IntErr);
// TComment -> TLiveComment -> TRenderUnit
// TCommentCollection -> TLiveCommentCollection -> TRenderUnitQueue

// TComment & TCommentCollection
type
  TAuthorSource = (Internet, Console, XML);
type
  TCommentAuthor = record
    Source: TAuthorSource;
    Address: string;
    Group: string;
  end;
type
  TCommentEffectType = (Scroll, UpperFixed, LowerFixed);
type
  TCommentEffect = record
    Display: TCommentEffectType;
    StayTime: SmallInt;
    RepeatCount: SmallInt;
    Speed: SmallInt;
  end;
type
  TCommentFormat = record
    DefaultName: Boolean;
    DefaultSize: Boolean;
    DefaultColor: Boolean;
    DefaultStyle: Boolean;
    FontName: WideString;
    FontSize: Single;
    FontColor: TAlphaColor;
    FontStyle: Integer; // Bitwise OR of TFontStyles
  end;
type
  TCommentStatus = (
    Created,    // [IDLE] Generated, not listed nor dispatched by MAIN THREAD
    Pending,    // [IDLE] Dispatched at least once but not send into TLiveCommentCollection
    Starting,   // [LIVE] Sent to TLiveCommentCollection and just to be rendered
    Waiting,    // [LIVE] Render decided not to draw it due to no channels left etc. Should be RARE
    Displaying, // [LIVE] Rendering and updating cycle
    Removing,   // [LIVE] Marked as displayed by render and render should remove it from TLiveCommentCollection
    Removed     // [IDLE] Marked as displayed or deleted comment and not in TLiveCommentCollection
  );
type
  TComment = class(TObject)
    Time: TTime;
    Content: string;
    Author: TCommentAuthor;
    Format: TCommentFormat;
    Effect: TCommentEffect;
    Status: TCommentStatus;
  protected
    FID: Integer;
    class var MaxID: Integer;
  public
    property ID: Integer read FID;
    constructor Create();
  end;
type
  PComment = ^TComment;
type
  TCommentCollection = TObjectList<TComment>;
type
  PCommentCollection = ^TCommentCollection;
// TLiveComment & TLiveCommentCollection
type
  TLiveCommentStatus = (
    LCreated,   // Generated by dispatcher and not complete
    LWait,      // Not calculated due to limitation
    LMoving,    // Do move/display
    LDelete     // Allow render to remove it
  );
type
  TLiveComment = class(TObject)
    Body: TComment;
    Status: TLiveCommentStatus;
    ChannelLayer: Integer;
    ChannelFrom: Integer;
    ChannelTo: Integer;
    Height: Integer;
    Width: Integer;
    Left: Integer;
    Top: Integer;
    Cycles: Cardinal;
    CycleValue: Cardinal;
  end;
type
  PLiveComment = ^TLiveComment;
type
  TLiveCommentCollection = TObjectList<TLiveComment>;
type
  PLiveCommentCollection = ^TLiveCommentCollection;
// TRenderUnit & TRenderUnitQueue
type
  TRenderUnit = record
    hSrcDC: HDC;
    hDC: HDC;
    hBitmap: HBITMAP;
  end;
type
  TRenderUnitQueue = TQueue<TRenderUnit>;
type
  PRenderUnitQueue = ^TRenderUnitQueue;
type
  TImageComment = class(TObject)
    DBID: Int64;
    Time: TTime;
    Author: TCommentAuthor;
    FileSize: Int64;
    Width, Height: Cardinal;
    IsSignatured: Boolean;
    Signature: string;
    Displayed: Boolean;
    Committed: Boolean;
    CommittedTime: TTime;
    class var ImageDir: string;
  protected
    FImageKey: string;
    FDownloaded: Boolean;
  public
    function GetImageFileName(): string;
    property ImageKey: string read FImageKey;
    property ImageFile: string read GetImageFileName;
    property Downloaded: Boolean read FDownloaded;
    procedure Reload;
    constructor Create(Key: string);
  end;
type
  TImageCommentCollection = TDictionary<Int64, TImageComment>;
type
  PImageCommentCollection = ^TImageCommentCollection;
type
  TSrvMessage = class(TObject)
    DBID: Int64;
    Time: TTime;
    Author: TCommentAuthor;
    MsgType: string;
    Content: string;
  end;
type
  TSrvMessageCollection = TDictionary<Int64, TSrvMessage>;


implementation

uses System.SysUtils, JPEGUtils;

constructor TComment.Create;
begin
  inherited Create();
  Inc(MaxID);
  Self.FID := MaxID;
end;

constructor TImageComment.Create(Key: string);

begin
  inherited Create();
  FImageKey := Key;
  Displayed := False;
  Reload;
end;

procedure TImageComment.Reload;
var
  X, Y: Word;
begin
  FDownloaded := FileExists(GetImageFileName());
  if FDownloaded then begin
    JPEGDimensions(GetImageFileName(), FileSize, X, Y);
    if FileSize < 1024 then begin
      FDownloaded := False;
    end;
    Width := X;
    Height := Y;
  end;
  if not FDownloaded then begin
    Width := 0;
    Height := 0;
  end;
end;

function TImageComment.GetImageFileName(): string;
begin
  Result := ImageDir + FImageKey + '.jpg';
end;

end.
